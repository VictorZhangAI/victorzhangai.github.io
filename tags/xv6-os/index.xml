<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>XV6 OS on VZstless</title>
    <link>https://vzstless.moe/tags/xv6-os/</link>
    <description>Recent content in XV6 OS on VZstless</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>VZstless</copyright>
    <lastBuildDate>Tue, 07 Jan 2025 18:57:30 +0800</lastBuildDate>
    <atom:link href="https://vzstless.moe/tags/xv6-os/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>xv6 LECTURE4</title>
      <link>https://vzstless.moe/p/xv6-lecture4/</link>
      <pubDate>Tue, 07 Jan 2025 18:57:30 +0800</pubDate>
      <guid>https://vzstless.moe/p/xv6-lecture4/</guid>
      <description>&lt;h2 id=&#34;handout-4&#34;&gt;Handout 4&lt;/h2&gt;&#xA;&lt;p&gt;what if a user program writes to a random part of memory?&lt;br&gt;&#xA;what way could we separate and isolate memory?&lt;br&gt;&#xA;page tables&lt;br&gt;&#xA;a level of indirection: CPU -(VM)&amp;gt; MMU -(PM)&amp;gt; MEM&lt;br&gt;&#xA;satp, MMU, kernel&lt;/p&gt;&#xA;&lt;p&gt;reduce the size of page tables, not building a direct-map&lt;/p&gt;&#xA;&lt;p&gt;page=4KB, maximum 52 bits, nowadays 27bits&lt;br&gt;&#xA;page table entry: 64 bits, 54 used, 10 of them are flags, low 12 bits of PA are from VA&lt;br&gt;&#xA;3-level page table to reduce its size&lt;br&gt;&#xA;a tree descended 9 bits at a time&lt;/p&gt;</description>
    </item>
    <item>
      <title>xv6 LECTURE3</title>
      <link>https://vzstless.moe/p/xv6-lecture3/</link>
      <pubDate>Sun, 05 Jan 2025 09:49:10 +0800</pubDate>
      <guid>https://vzstless.moe/p/xv6-lecture3/</guid>
      <description>&lt;h2 id=&#34;handout-3&#34;&gt;Handout 3&lt;/h2&gt;&#xA;&lt;p&gt;No OS: lack of isolation&lt;br&gt;&#xA;fork() -&amp;gt; abstract core&lt;br&gt;&#xA;exec()/sbrk() -&amp;gt; abstract RAM&lt;br&gt;&#xA;assumption: user is always willing to break the isolation, while kernel is always trustable&lt;br&gt;&#xA;user mode and supervisor mode&lt;br&gt;&#xA;pgtbl: maps virtual-&amp;gt;physical&lt;br&gt;&#xA;ecall: change to supervisor mode, get to a known point of the kernel code&lt;/p&gt;&#xA;&lt;p&gt;Singularity provides a way of process isolation without hardware support&lt;/p&gt;&#xA;&lt;p&gt;kernel is a big program holds all of the syscalls&lt;br&gt;&#xA;On CVE there&amp;rsquo;s 2997 bugs detected on Linux in 2024(kernel bugs are much more common than we thought)&lt;/p&gt;</description>
    </item>
    <item>
      <title>xv6 LECTURE2</title>
      <link>https://vzstless.moe/p/xv6-lecture2/</link>
      <pubDate>Fri, 03 Jan 2025 22:12:02 +0800</pubDate>
      <guid>https://vzstless.moe/p/xv6-lecture2/</guid>
      <description>&lt;h2 id=&#34;handout-2&#34;&gt;Handout 2&lt;/h2&gt;&#xA;&lt;p&gt;memory layout:&lt;br&gt;&#xA;text: code, read-only data&lt;br&gt;&#xA;data: global C vars&lt;br&gt;&#xA;stack: local variables&lt;br&gt;&#xA;heap: sbrk, malloc, free&lt;br&gt;&#xA;.c -compile-&amp;gt; .o -link-&amp;gt; executable file&lt;br&gt;&#xA;strlen() uses array access while strcmp() uses pointer access&lt;br&gt;&#xA;kalloc() keeps a large linked list of free pages of memory&lt;br&gt;&#xA;LRU buffer cache is implemented as a dual-pointer linked list&lt;br&gt;&#xA;static: limited to the file where the variable is declared&lt;/p&gt;&#xA;&lt;h2 id=&#34;slides&#34;&gt;Slides&lt;/h2&gt;&#xA;&lt;p&gt;This class focus on RAM and I/O&lt;br&gt;&#xA;address space: represent bus as a giant array of data&lt;br&gt;&#xA;memory allocation: decide where array to store things&lt;br&gt;&#xA;A stack is much more smaller than heap&lt;/p&gt;</description>
    </item>
    <item>
      <title>xv6 LECTURE1</title>
      <link>https://vzstless.moe/p/xv6-lecture1/</link>
      <pubDate>Wed, 01 Jan 2025 08:28:39 +0800</pubDate>
      <guid>https://vzstless.moe/p/xv6-lecture1/</guid>
      <description>&lt;h2 id=&#34;handout-1&#34;&gt;Handout 1&lt;/h2&gt;&#xA;&lt;p&gt;Purpose of an OS:&lt;/p&gt;&#xA;&lt;p&gt;Isolate hard/software, virtualize hardware&lt;br&gt;&#xA;Interact with OS via syscalls&lt;br&gt;&#xA;First arg in syscall is FD&lt;br&gt;&#xA;UNIX I/O is 8-bit bytes&lt;/p&gt;&#xA;&lt;p&gt;When CPU receives a syscall:&lt;br&gt;&#xA;save, jump, execute, call, restore, reduce, jump back&lt;/p&gt;&#xA;&lt;p&gt;Shell is a user program instead of shell&lt;br&gt;&#xA;fork() lets us create a new process&lt;br&gt;&#xA;exec() replaces current process with an executable file&lt;/p&gt;&#xA;&lt;h2 id=&#34;book-chapter-1&#34;&gt;Book Chapter 1&lt;/h2&gt;&#xA;&lt;p&gt;Operating system let different softwares use hardware together&lt;br&gt;&#xA;Process: instructions, data, stack&lt;br&gt;&#xA;fork() returns 0 in the child process while pid in the parent process&lt;br&gt;&#xA;wait() returns the pid and copies the exit status&lt;br&gt;&#xA;exec() loads a file and executes it&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
