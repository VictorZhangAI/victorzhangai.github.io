<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>XV6 OS on VZstless</title>
    <link>https://vzstless.moe/tags/xv6-os/</link>
    <description>Recent content in XV6 OS on VZstless</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>VZstless</copyright>
    <lastBuildDate>Fri, 24 Jan 2025 08:33:35 +0800</lastBuildDate>
    <atom:link href="https://vzstless.moe/tags/xv6-os/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>xv6 LECTURE13</title>
      <link>https://vzstless.moe/p/xv6-lecture13/</link>
      <pubDate>Fri, 24 Jan 2025 08:33:35 +0800</pubDate>
      <guid>https://vzstless.moe/p/xv6-lecture13/</guid>
      <description>&lt;h2 id=&#34;handout-13&#34;&gt;Handout 13&lt;/h2&gt;&#xA;&lt;p&gt;files, bit arrays, human-readable names&lt;br&gt;&#xA;fs APIs&lt;br&gt;&#xA;fd: listed to the file even if it changes&lt;br&gt;&#xA;a file can have multiple links&lt;br&gt;&#xA;file must have info stored other than directory&lt;/p&gt;&#xA;&lt;p&gt;inode: i-number(initial version), link count, count of open FDs&lt;br&gt;&#xA;inode deallocation deferred until last link and FD are gone&lt;/p&gt;&#xA;&lt;p&gt;data stays on disk without power&lt;br&gt;&#xA;historically, disks were read/write usually in 512-byte units, called sectors&lt;/p&gt;&#xA;&lt;p&gt;in HDD, sub-sector operation are expensive(read-modify-write)&lt;br&gt;&#xA;flash must be erased before written&lt;br&gt;&#xA;xv6 uses 2-sector blocks&lt;/p&gt;</description>
    </item>
    <item>
      <title>xv6 LECTURE12</title>
      <link>https://vzstless.moe/p/xv6-lecture12/</link>
      <pubDate>Wed, 22 Jan 2025 14:43:23 +0800</pubDate>
      <guid>https://vzstless.moe/p/xv6-lecture12/</guid>
      <description>&lt;h2 id=&#34;handout-12&#34;&gt;Handout 12&lt;/h2&gt;&#xA;&lt;p&gt;why hold p-&amp;gt;lock across threads?&lt;br&gt;&#xA;forbid holding lock when yielding the CPU!&lt;br&gt;&#xA;threads often wait for conditions&lt;/p&gt;&#xA;&lt;p&gt;use coordination primitives&lt;br&gt;&#xA;uartwrite(): writing thread should give up CPU&lt;br&gt;&#xA;sleep() cannot simply wait the event, or will cause lose wake-up problem&lt;/p&gt;&#xA;&lt;p&gt;what&amp;rsquo;s wrong if uartwrite() releases the lock before broken_sleep()?&lt;br&gt;&#xA;uartwrite() went to sleep EVEN THOUGH UART TX WAS DONE, nothing will awake uartwrite()&lt;br&gt;&#xA;use lock to prevent wakeup() from running during the entire window&lt;/p&gt;</description>
    </item>
    <item>
      <title>xv6 LECTURE11</title>
      <link>https://vzstless.moe/p/xv6-lecture11/</link>
      <pubDate>Tue, 21 Jan 2025 16:58:37 +0800</pubDate>
      <guid>https://vzstless.moe/p/xv6-lecture11/</guid>
      <description>&lt;h2 id=&#34;handout-11&#34;&gt;Handout 11&lt;/h2&gt;&#xA;&lt;p&gt;concurrency: threads inside the kernel, processes&lt;br&gt;&#xA;each thread, taken alone, executes in an ordinary way&lt;br&gt;&#xA;need locks when interact&lt;/p&gt;&#xA;&lt;p&gt;in xv6, only one user-level thread&lt;br&gt;&#xA;event-driven and state machine could also use to multitasking&lt;br&gt;&#xA;executing: using resources; not executing: save and release&lt;br&gt;&#xA;each process has its own kernel thread&lt;/p&gt;&#xA;&lt;p&gt;p-&amp;gt;state: running, runnable, sleeping&lt;br&gt;&#xA;user-&amp;gt;kernel-&amp;gt;scheduler-&amp;gt;kernel-&amp;gt;user&lt;br&gt;&#xA;scheduler thread: one per CPU&lt;br&gt;&#xA;idle scheduler: no running thread&lt;br&gt;&#xA;swtch() returns to scheduler()&lt;br&gt;&#xA;swtch(): saves current registers in xx(a0), restores registers in xx(a1)&lt;/p&gt;</description>
    </item>
    <item>
      <title>xv6 LECTURE10</title>
      <link>https://vzstless.moe/p/xv6-lecture10/</link>
      <pubDate>Sun, 19 Jan 2025 07:11:18 +0800</pubDate>
      <guid>https://vzstless.moe/p/xv6-lecture10/</guid>
      <description>&lt;h2 id=&#34;handout-10&#34;&gt;Handout 10&lt;/h2&gt;&#xA;&lt;p&gt;kernel must deal with parallel syscalls&lt;br&gt;&#xA;race between two cores calling kfree() leads to a page losing&lt;br&gt;&#xA;if multiple cores calls the lock, only one will be returned, other will wait until the lock release&lt;br&gt;&#xA;auto locking? needs explicit comtrol over different regions of code&lt;br&gt;&#xA;deadlocking problem&lt;br&gt;&#xA;locks are often not private business of modules&lt;br&gt;&#xA;lock &amp;amp; parallelism may require a whole re-write for the project!&lt;br&gt;&#xA;use big lock first, big lock is always enough&lt;br&gt;&#xA;check and re-lock the lock atomically, pushing down the question into hardware&lt;/p&gt;</description>
    </item>
    <item>
      <title>xv6 LECTURE9</title>
      <link>https://vzstless.moe/p/xv6-lecture9/</link>
      <pubDate>Thu, 16 Jan 2025 23:24:27 +0800</pubDate>
      <guid>https://vzstless.moe/p/xv6-lecture9/</guid>
      <description>&lt;h2 id=&#34;handout-9&#34;&gt;Handout 9&lt;/h2&gt;&#xA;&lt;p&gt;CPU &amp;amp; devices: complicated &amp;amp; parallel&lt;br&gt;&#xA;most code in modern OSes are device drivers&lt;br&gt;&#xA;UART, RS232 port&lt;br&gt;&#xA;UART &amp;amp; FIFO: not using a busy loop, but using interrupts&lt;br&gt;&#xA;UART interrupts if: rx FIFO goes from empty to not-empty, or tx FIFO goes from full to not-full&lt;/p&gt;&#xA;&lt;p&gt;device interrupts: device -&amp;gt; PLIC -&amp;gt; trap -&amp;gt; usertrap()/kerneltrap() -&amp;gt; devintr()&lt;br&gt;&#xA;interrupt just means the state of device is changed&lt;br&gt;&#xA;the bottom-half of interrupt doesn&amp;rsquo;t run in the context of top-half&lt;br&gt;&#xA;registers: sie(supervisor interrupt enabled), PLIC claim: get next IRQ, sstatus&lt;/p&gt;</description>
    </item>
    <item>
      <title>xv6 LECTURE8</title>
      <link>https://vzstless.moe/p/xv6-lecture8/</link>
      <pubDate>Wed, 15 Jan 2025 10:29:46 +0800</pubDate>
      <guid>https://vzstless.moe/p/xv6-lecture8/</guid>
      <description>&lt;h2 id=&#34;handout-8&#34;&gt;Handout 8&lt;/h2&gt;&#xA;&lt;p&gt;pgtbl is hard to debug, why?&lt;br&gt;&#xA;how to speed up syscall? Linux has vDSO&lt;br&gt;&#xA;vDSO enables virtual syscalls&lt;br&gt;&#xA;511: trampoline&lt;br&gt;&#xA;510: trapframe&lt;br&gt;&#xA;509: USYSCALL&lt;/p&gt;&#xA;&lt;p&gt;protection bits? URV, WRV, XRV&lt;br&gt;&#xA;scan all pages could be expensive!!&lt;/p&gt;&#xA;&lt;h2 id=&#34;slides-8&#34;&gt;Slides 8&lt;/h2&gt;&#xA;&lt;p&gt;which syscall could be sped up?&lt;br&gt;&#xA;mo side-effect, return constant value, value can change after entering the kernel&lt;br&gt;&#xA;options: getpid() &amp;amp; uptime()&lt;/p&gt;&#xA;&lt;p&gt;provide a bitmask for pages accessed&lt;br&gt;&#xA;detect page accesses without access bits? use page fault!&lt;br&gt;&#xA;TOCTOU attack: argument is modified after the kernel reads it&lt;/p&gt;</description>
    </item>
    <item>
      <title>xv6 LECTURE7</title>
      <link>https://vzstless.moe/p/xv6-lecture7/</link>
      <pubDate>Tue, 14 Jan 2025 12:07:31 +0800</pubDate>
      <guid>https://vzstless.moe/p/xv6-lecture7/</guid>
      <description>&lt;h2 id=&#34;handout-7&#34;&gt;Handout 7&lt;/h2&gt;&#xA;&lt;p&gt;VM-related projects: COW, mappings, performance&lt;br&gt;&#xA;ideas: isolation, indirection&lt;br&gt;&#xA;panic? update page tables when page fault happens&lt;br&gt;&#xA;VA causes page fault: stval reg&lt;br&gt;&#xA;violation causes page fault: scause reg&lt;br&gt;&#xA;instruction/mode can also cause page fault&lt;/p&gt;&#xA;&lt;p&gt;if the user program asks for more memory, sbrk() could be expensive&lt;br&gt;&#xA;zero-filled page? large part of memory filled with zero&lt;br&gt;&#xA;COW or write then copy&lt;/p&gt;&#xA;&lt;p&gt;don&amp;rsquo;t let fork() copy every pages from parent&lt;br&gt;&#xA;but share addr space between parent and child, use RSW in PTEs&lt;br&gt;&#xA;page fault: make copy, map, read/write(hard in real life!)&lt;/p&gt;</description>
    </item>
    <item>
      <title>xv6 LECTURE6</title>
      <link>https://vzstless.moe/p/xv6-lecture6/</link>
      <pubDate>Sun, 12 Jan 2025 16:14:43 +0800</pubDate>
      <guid>https://vzstless.moe/p/xv6-lecture6/</guid>
      <description>&lt;h2 id=&#34;handout-6&#34;&gt;Handout 6&lt;/h2&gt;&#xA;&lt;p&gt;focusing on user-&amp;gt;kernel transition&lt;br&gt;&#xA;NEVER execute user code in supervisor mode&lt;br&gt;&#xA;C on RISC-V puts function arguments in a0, a1, a2, &amp;amp;c&lt;/p&gt;&#xA;&lt;p&gt;check pagetables: C-a c, info mem&lt;br&gt;&#xA;trampoline: the start of kernel&amp;rsquo;s trap handling code&lt;br&gt;&#xA;at the top: avoid punch a hole in user addr&lt;/p&gt;&#xA;&lt;p&gt;observe PC is an indirect way to check whether we&amp;rsquo;re in supervisor mode&lt;/p&gt;&#xA;&lt;p&gt;ecall:&lt;br&gt;&#xA;change mode, save PC in SEPC, jump to STVEC, disable further interrupts&lt;br&gt;&#xA;ecall does as little as possible&lt;br&gt;&#xA;even supervisor mode is constrained to use pgtbl&lt;/p&gt;</description>
    </item>
    <item>
      <title>xv6 LECTURE5</title>
      <link>https://vzstless.moe/p/xv6-lecture5/</link>
      <pubDate>Thu, 09 Jan 2025 21:52:22 +0800</pubDate>
      <guid>https://vzstless.moe/p/xv6-lecture5/</guid>
      <description>&lt;h2 id=&#34;gdb&#34;&gt;GDB&lt;/h2&gt;&#xA;&lt;p&gt;step: one line of code at a time, jumps into the function&lt;br&gt;&#xA;next: jump over functions&lt;br&gt;&#xA;stepi, nexti: do same thing for asm code&lt;br&gt;&#xA;continue: run until next breakpoint&lt;br&gt;&#xA;finish: runs until the function ends&lt;/p&gt;&#xA;&lt;p&gt;break: set a breakpoint&lt;br&gt;&#xA;watch: stop whenever value changes&lt;br&gt;&#xA;x: prints the raw memory&lt;br&gt;&#xA;print: prints the expression&lt;br&gt;&#xA;info registers: print value of registers&lt;br&gt;&#xA;info frame: prints current stack frame&lt;/p&gt;&#xA;&lt;p&gt;set: change value of a variable&lt;/p&gt;</description>
    </item>
    <item>
      <title>xv6 LECTURE4</title>
      <link>https://vzstless.moe/p/xv6-lecture4/</link>
      <pubDate>Tue, 07 Jan 2025 18:57:30 +0800</pubDate>
      <guid>https://vzstless.moe/p/xv6-lecture4/</guid>
      <description>&lt;h2 id=&#34;handout-4&#34;&gt;Handout 4&lt;/h2&gt;&#xA;&lt;p&gt;what if a user program writes to a random part of memory?&lt;br&gt;&#xA;what way could we separate and isolate memory?&lt;br&gt;&#xA;page tables&lt;br&gt;&#xA;a level of indirection: CPU -(VM)&amp;gt; MMU -(PM)&amp;gt; MEM&lt;br&gt;&#xA;satp, MMU, kernel&lt;/p&gt;&#xA;&lt;p&gt;reduce the size of page tables, not building a direct-map&lt;/p&gt;&#xA;&lt;p&gt;page=4KB, maximum 52 bits, nowadays 27bits&lt;br&gt;&#xA;page table entry: 64 bits, 54 used, 10 of them are flags, low 12 bits of PA are from VA&lt;br&gt;&#xA;3-level page table to reduce its size&lt;br&gt;&#xA;a tree descended 9 bits at a time&lt;/p&gt;</description>
    </item>
    <item>
      <title>xv6 LECTURE3</title>
      <link>https://vzstless.moe/p/xv6-lecture3/</link>
      <pubDate>Sun, 05 Jan 2025 09:49:10 +0800</pubDate>
      <guid>https://vzstless.moe/p/xv6-lecture3/</guid>
      <description>&lt;h2 id=&#34;handout-3&#34;&gt;Handout 3&lt;/h2&gt;&#xA;&lt;p&gt;No OS: lack of isolation&lt;br&gt;&#xA;fork() -&amp;gt; abstract core&lt;br&gt;&#xA;exec()/sbrk() -&amp;gt; abstract RAM&lt;br&gt;&#xA;assumption: user is always willing to break the isolation, while kernel is always trustable&lt;br&gt;&#xA;user mode and supervisor mode&lt;br&gt;&#xA;pgtbl: maps virtual-&amp;gt;physical&lt;br&gt;&#xA;ecall: change to supervisor mode, get to a known point of the kernel code&lt;/p&gt;&#xA;&lt;p&gt;Singularity provides a way of process isolation without hardware support&lt;/p&gt;&#xA;&lt;p&gt;kernel is a big program holds all of the syscalls&lt;br&gt;&#xA;On CVE there&amp;rsquo;s 2997 bugs detected on Linux in 2024(kernel bugs are much more common than we thought)&lt;/p&gt;</description>
    </item>
    <item>
      <title>xv6 LECTURE2</title>
      <link>https://vzstless.moe/p/xv6-lecture2/</link>
      <pubDate>Fri, 03 Jan 2025 22:12:02 +0800</pubDate>
      <guid>https://vzstless.moe/p/xv6-lecture2/</guid>
      <description>&lt;h2 id=&#34;handout-2&#34;&gt;Handout 2&lt;/h2&gt;&#xA;&lt;p&gt;memory layout:&lt;br&gt;&#xA;text: code, read-only data&lt;br&gt;&#xA;data: global C vars&lt;br&gt;&#xA;stack: local variables&lt;br&gt;&#xA;heap: sbrk, malloc, free&lt;br&gt;&#xA;.c -compile-&amp;gt; .o -link-&amp;gt; executable file&lt;br&gt;&#xA;strlen() uses array access while strcmp() uses pointer access&lt;br&gt;&#xA;kalloc() keeps a large linked list of free pages of memory&lt;br&gt;&#xA;LRU buffer cache is implemented as a dual-pointer linked list&lt;br&gt;&#xA;static: limited to the file where the variable is declared&lt;/p&gt;&#xA;&lt;h2 id=&#34;slides&#34;&gt;Slides&lt;/h2&gt;&#xA;&lt;p&gt;This class focus on RAM and I/O&lt;br&gt;&#xA;address space: represent bus as a giant array of data&lt;br&gt;&#xA;memory allocation: decide where array to store things&lt;br&gt;&#xA;A stack is much more smaller than heap&lt;/p&gt;</description>
    </item>
    <item>
      <title>xv6 LECTURE1</title>
      <link>https://vzstless.moe/p/xv6-lecture1/</link>
      <pubDate>Wed, 01 Jan 2025 08:28:39 +0800</pubDate>
      <guid>https://vzstless.moe/p/xv6-lecture1/</guid>
      <description>&lt;h2 id=&#34;handout-1&#34;&gt;Handout 1&lt;/h2&gt;&#xA;&lt;p&gt;Purpose of an OS:&lt;/p&gt;&#xA;&lt;p&gt;Isolate hard/software, virtualize hardware&lt;br&gt;&#xA;Interact with OS via syscalls&lt;br&gt;&#xA;First arg in syscall is FD&lt;br&gt;&#xA;UNIX I/O is 8-bit bytes&lt;/p&gt;&#xA;&lt;p&gt;When CPU receives a syscall:&lt;br&gt;&#xA;save, jump, execute, call, restore, reduce, jump back&lt;/p&gt;&#xA;&lt;p&gt;Shell is a user program instead of shell&lt;br&gt;&#xA;fork() lets us create a new process&lt;br&gt;&#xA;exec() replaces current process with an executable file&lt;/p&gt;&#xA;&lt;h2 id=&#34;book-chapter-1&#34;&gt;Book Chapter 1&lt;/h2&gt;&#xA;&lt;p&gt;Operating system let different softwares use hardware together&lt;br&gt;&#xA;Process: instructions, data, stack&lt;br&gt;&#xA;fork() returns 0 in the child process while pid in the parent process&lt;br&gt;&#xA;wait() returns the pid and copies the exit status&lt;br&gt;&#xA;exec() loads a file and executes it&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
